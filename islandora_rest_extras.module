<?php

/**
 * Implements hook_menu().
 */
function islandora_rest_extras_menu() {
  $items = array();
  $items['admin/islandora/tools/rest_extras'] = array(
    'title' => 'Islandora REST Extras',
    'description' => 'Configure the Islandora REST Extras module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_rest_extras_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/rest/v1/describe'] = array(
    'page callback' => 'islandora_rest_extras_describe',
    // Access control is performed in the callback function.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Admin settings form builder.
 */
function islandora_rest_extras_admin_settings($form, &$form_state) {
  $form['islandora_rest_extras_dc_generation'] = array(
    '#title' => t('DC datastream generation'),
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t("Settings governing generation of DC datastream content."),
  );
  $form['islandora_rest_extras_dc_generation']['islandora_rest_extras_dc_source_dsid'] = array(
    '#title' => t('Source DSID used to regenerate the DC datastream'),
    '#type' => 'textfield',
    '#default_value' => variable_get('islandora_rest_extras_dc_source_dsid', 'MODS'),
    '#description' => t('Leave blank to not regenerate DC.'),
  );
  $form['islandora_rest_extras_dc_generation']['islandora_rest_extras_dc_xslt_path'] = array(
    '#title' => t('Path to the XSLT stylesheet used to regenerate the DC datastream'),
    '#type' => 'textfield',
    '#default_value' => variable_get('islandora_rest_extras_dc_xslt_path', 'sites/all/modules/islandora_xml_forms/builder/transforms/mods_to_dc.xsl'),
    '#description' => t('Path is relative to your Drupal root.'),
  );

  $form['islandora_rest_extras_enable_describe'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable the /describe endpoint'),
    '#default_value' => variable_get('islandora_rest_extras_enable_describe', 1),
    '#description' => t('Check this option if you want to enable the /describe REST endpoint.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function islandora_rest_extras_permission() {
  return array(
    'view repository describe' => array(
      'title' => t('View repository describe'),
      'description' => t('Allows users to view the output of the REST /describe endpoint, which may contain sensitive information.'),
    ),
  );
}

/**
 * Implements hook_islandora_rest_response().
 */
function islandora_rest_extras_islandora_rest_response($endpoint, $request_parameters, $response, $e) {
  if ($endpoint == 'datastream' && array_key_exists('dsid', $response) && $response['dsid'] == 'MODS' && array_key_exists('versions', $response)) {
    $source_dsid = variable_get('islandora_rest_extras_dc_source_dsid', 'MODS');
    if (strlen($source_dsid)) {
      if ($object = islandora_object_load($request_parameters['pid'])) {
        islandora_rest_extras_regenerate_dc($object, $source_dsid);
      }
      else {
        watchdog('islandora_rest_extras', 'Cannot cannot load object !pid',
        array(
          '!pid' => $request_parameters['pid'],
        ),
        WATCHDOG_WARNING);
      }
    }
  }
}

/**
 * Regenerates content of the DC datastream.
 *
 * @param object $object
 *   The Islandora object.
 * @param string $source_dsid
 *   The source DSID.
 *
 * @return bool
 *   TRUE if the DC was regenerated and replaced, FALSE otherwise.
 */
function islandora_rest_extras_regenerate_dc($object, $source_dsid) {
  $xslt_path = variable_get('islandora_rest_extras_dc_xslt_path', 'sites/all/modules/islandora_xml_forms/builder/transforms/mods_to_dc.xsl');
  if (!file_exists($xslt_path)) {
    watchdog('islandora_rest_extras', 'Cannot find XSLT stylesheet at !path',
      array(
        '!path' => $xslt_path,
      ),
      WATCHDOG_WARNING);
    return FALSE;
  }

  if (!isset($object[$source_dsid])) {
    watchdog('islandora_rest_extras', 'Object does not have the datastream !dsid',
      array(
        '!dsid' => $source_dsid,
      ),
      WATCHDOG_WARNING);
    return FALSE;
  }

  try {
    $xsl_doc = new DOMDocument();
    $xsl_doc->load(realpath($xslt_path));
    $xml_doc = new DOMDocument();
    $xml_doc->loadXML($object[$source_dsid]->content);
    $xslt_proc = new XSLTProcessor();
    $xslt_proc->importStylesheet($xsl_doc);
    $dc_xml = $xslt_proc->transformToXML($xml_doc);
    $object['DC']->setContentFromString($dc_xml);
    return TRUE;
  }
  catch (Exception $e) {
    watchdog_exception(
      'islandora_rest_extras',
      $e,
      'Error regenerating DC content.'
    );
    return FALSE;
  }
}

function islandora_rest_extras_describe() {
  if (!variable_get('islandora_rest_extras_enable_describe', 1)) {
    drupal_add_http_header('Status', 404);
    drupal_exit();
  }
  if (!user_access('view repository describe')) {
    drupal_add_http_header('Status', 401);
    drupal_exit();
  }

  // Since we only POST one file at a time for datastreams,
  // we should use that setting instead of post_max_size.
  $upload_max_filesize = ini_get('upload_max_filesize');
  $describe = array('max_datastream_file_size' => $upload_max_filesize);

  drupal_alter('islandora_rest_extras_describe', $describe);

  drupal_json_output($describe);
  drupal_exit();
}
